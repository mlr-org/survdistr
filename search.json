[{"path":[]},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement bblodfon@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://survdistr.mlr-org.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://survdistr.mlr-org.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 survdistr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://survdistr.mlr-org.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Zobolas. Author, maintainer.","code":""},{"path":"https://survdistr.mlr-org.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zobolas J (2025). survdistr: Survival Distribution Containers. R package version 0.0.1, https://survdistr.mlr-org.com.","code":"@Manual{,   title = {survdistr: Survival Distribution Containers},   author = {John Zobolas},   year = {2025},   note = {R package version 0.0.1},   url = {https://survdistr.mlr-org.com}, }"},{"path":"https://survdistr.mlr-org.com/index.html","id":"survdistr","dir":"","previous_headings":"","what":"Survival Distribution Containers","title":"Survival Distribution Containers","text":"⚠️ Development package experimental yet intended general use. APIs may change without notice, functionality incomplete. Please use testing development purposes. Survival distribution containers efficient storage, management, evaluation survival model predictions.","code":""},{"path":"https://survdistr.mlr-org.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Survival Distribution Containers","text":"Install development version GitHub:","code":"# install.packages(\"pak\") pak::pak(\"mlr-org/survdistr\")"},{"path":"https://survdistr.mlr-org.com/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Survival Distribution Containers","text":"Linear interpolation survival matrix using survDistr R6 class: Interpolation Kaplan-Meier survival curve using exported R function calls C code:","code":"library(survdistr)  # generate survival matrix mat = matrix(data = c(1,0.6,0.4,0.8,0.8,0.7), nrow = 2,              ncol = 3, byrow = TRUE) x = survDistr$new(x = mat, times = c(12, 34, 42), interp_meth = \"linear_surv\") x ## A [2 x 3] survival matrix ## Number of observations: 2 ## Number of time points: 3 ## Interpolation method: Piece-wise Linear Survival # stored survival matrix x$data() ##       12  34  42 ## [1,] 1.0 0.6 0.4 ## [2,] 0.8 0.8 0.7 # S(t) at given time points (linear interpolation) x$survival(times = c(5, 30, 42, 50)) ##              5        30  42  50 ## [1,] 1.0000000 0.6727273 0.4 0.2 ## [2,] 0.9166667 0.8000000 0.7 0.6 # Cumulative hazard H(t) x$cumhazard(times = c(50, 5, 5, 42)) # times can be unordered or duplicated ##             50          5          5        42 ## [1,] 1.6094379 0.00000000 0.00000000 0.9162907 ## [2,] 0.5108256 0.08701138 0.08701138 0.3566749 library(survival) library(data.table)  fit = survfit(formula = Surv(time, status) ~ 1, data = veteran) tab = data.table(time = fit$time, surv = fit$surv) tab ##       time        surv ##      <num>       <num> ##   1:     1 0.985401460 ##   2:     2 0.978102190 ##   3:     3 0.970802920 ##   4:     4 0.963503650 ##   5:     7 0.941605839 ##  ---                   ##  97:   467 0.036018043 ##  98:   553 0.027013532 ##  99:   587 0.018009021 ## 100:   991 0.009004511 ## 101:   999 0.000000000 # constant S(t) interpolation vec_interp(   x = tab$surv,    times = tab$time,    eval_times = c(0, 3.5, 995, 1000),   constant = TRUE,   type = \"surv\" ) ##           0         3.5         995        1000  ## 1.000000000 0.970802920 0.009004511 0.000000000 # linear S(t) interpolation vec_interp(   x = tab$surv,    times = tab$time,    eval_times = c(0, 3.5, 995, 1000),   constant = FALSE,   type = \"surv\" ) ##           0         3.5         995        1000  ## 1.000000000 0.967153285 0.004502255 0.000000000"},{"path":"https://survdistr.mlr-org.com/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Survival Distribution Containers","text":"Please note survdistr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://survdistr.mlr-org.com/reference/assert_prob_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert probability matrix — assert_prob_matrix","title":"Assert probability matrix — assert_prob_matrix","text":"Validates input proper probability matrix representing either survival function (\"surv\"), cumulative distribution function (\"cdf\"), cumulative incidence function (\"cif\"). Uses internal Rcpp function c_assert_prob_matrix().","code":""},{"path":"https://survdistr.mlr-org.com/reference/assert_prob_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert probability matrix — assert_prob_matrix","text":"","code":"assert_prob_matrix(x, times = NULL, type = \"surv\")"},{"path":"https://survdistr.mlr-org.com/reference/assert_prob_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert probability matrix — assert_prob_matrix","text":"x (matrix()) probability matrix. Rows correspond observations columns correspond time points. times (numeric()|NULL) Optional numeric vector time points corresponding columns x. numeric(), returned checks performed. NULL (default), time points extracted colnames(x). type (character(1)) Type probability function: \"surv\" (default), \"cdf\", \"cif\".","code":""},{"path":"https://survdistr.mlr-org.com/reference/assert_prob_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert probability matrix — assert_prob_matrix","text":"Invisibly returns validated numeric vector time points. Throws error validation fails.","code":""},{"path":"https://survdistr.mlr-org.com/reference/assert_prob_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assert probability matrix — assert_prob_matrix","text":"following conditions must hold: input x numeric matrix missing values. Time points (times) numeric, non-negative, unique, sorted. supplied, derived colnames(x) (coerced numeric). number time points equals number columns x. values valid probabilities, .e. lie \\([0,1]\\). row monotone: \"surv\": non-increasing survival curves, .e. \\(S(t_i) \\ge S(t_{+1})\\). \"cdf\" / \"cif\": non-decreasing functions, .e. \\(F(t_i) \\le F(t_{+1})\\). Boundary condition t = 0: \"surv\": \\(S(0) = 1\\). \"cdf\" / \"cif\": \\(F(0) = 0\\).","code":""},{"path":"https://survdistr.mlr-org.com/reference/assert_prob_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert probability matrix — assert_prob_matrix","text":"","code":"x = matrix(data = c(1, 0.6, 0.4,                     0.8, 0.8, 0.7),            nrow = 2, ncol = 3, byrow = TRUE)  # Explicitly provide time points assert_prob_matrix(x, times = c(12, 34, 42), type = \"surv\")  # Or use column names as time points colnames(x) = c(12, 34, 42) assert_prob_matrix(x)  # check CDF assert_prob_matrix(1 - x, type = \"cdf\")"},{"path":"https://survdistr.mlr-org.com/reference/mat_interp.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate Survival / CDF / CIF Matrices — mat_interp","title":"Interpolate Survival / CDF / CIF Matrices — mat_interp","text":"Wrapper around internal C++ interpolation function c_mat_interp. Performs input validation calling underlying C++ code. Can used survival, cumulative distribution (CDF), cumulative incidence (CIF) matrices.","code":""},{"path":"https://survdistr.mlr-org.com/reference/mat_interp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate Survival / CDF / CIF Matrices — mat_interp","text":"","code":"mat_interp(   x,   times = NULL,   eval_times = NULL,   constant = TRUE,   type = \"surv\",   add_times = TRUE,   check = TRUE )"},{"path":"https://survdistr.mlr-org.com/reference/mat_interp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate Survival / CDF / CIF Matrices — mat_interp","text":"x (matrix()) Survival/CDF/CIF matrix rows observations columns time points. times (numeric() | NULL) Original time points corresponding columns x. eval_times (numeric() | NULL) New time points interpolate. Values need sorted unique, just non-negative. NULL, x returned unchanged. constant (logical(1)) TRUE (default), use piecewise-constant (left-continuous) interpolation. FALSE, use piecewise-linear interpolation. type (character(1)) One \"surv\" (default), \"cdf\", \"cif\", indicating input data type. add_times (logical(1)) TRUE (default), column names set relevant time points. check (logical(1)) TRUE, run input matrix validation via assert_prob_matrix(); set FALSE skip checks (recommended external use).","code":""},{"path":"https://survdistr.mlr-org.com/reference/mat_interp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate Survival / CDF / CIF Matrices — mat_interp","text":"numeric matrix number rows x number columns equal length(eval_times).","code":""},{"path":"https://survdistr.mlr-org.com/reference/mat_interp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate Survival / CDF / CIF Matrices — mat_interp","text":"","code":"x = matrix(c(1, 0.8, 0.6,              1, 0.7, 0.4),            nrow = 2, byrow = TRUE) times = c(0, 10, 20) eval_times = c(5, 15, 25, 15) # duplicates & unordered mat_interp(x, times, eval_times, constant = TRUE, type = \"surv\") #>      5  15  25  15 #> [1,] 1 0.8 0.6 0.8 #> [2,] 1 0.7 0.4 0.7"},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival Distribution Container — survDistr","title":"Survival Distribution Container — survDistr","text":"survDistr R6 specialized container designed storing managing prediction outputs survival models single-event settings. includes models Cox proportional hazards, random survival forests, classical machine learning-based survival estimators. main prediction data type can survival hazard matrix, rows represent observations columns represent time points.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Survival Distribution Container — survDistr","text":"input matrix (survival probabilities \\(S(t)\\) hazard \\(h(t)\\)) stored internally accessed $data field. interpolation type needed public methods stored $interp_meth slot. construction, function assert_prob_matrix() used validate input data matrix according given data_type.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Survival Distribution Container — survDistr","text":"times (numeric]) Numeric vector time points corresponding columns data. data_type (character(1)) Either \"surv\" survival \"haz\" hazard matrices. interp_meth (character(1)) Interpolation method; one \"const_surv\", \"linear_surv\", \"const_haz\".","code":""},{"path":[]},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Survival Distribution Container — survDistr","text":"survDistr$new() survDistr$print() survDistr$data() survDistr$survival() survDistr$cdf() survDistr$cumhazard() survDistr$hazard() survDistr$pdf() survDistr$clone()","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Survival Distribution Container — survDistr","text":"Creates new instance R6 class.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Distribution Container — survDistr","text":"","code":"survDistr$new(x, times = NULL, data_type = \"surv\", interp_meth = \"const_surv\")"},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Distribution Container — survDistr","text":"x (matrix) numeric matrix either survival probabilities (values 0 1) hazard values (non-negative values). Column names must correspond time points times NULL. times (numeric(1)) Numeric vector time points matrix x, must match number columns. data_type (character(1)) type input data. Either survival matrix (\"survival\", default) hazard (\"hazard\") matrix. interp_meth (character(1)) Interpolation method use requesting quantity interest time points different ones stored object (accessible via times method). Currently supported interpolation methods include \"const_surv\" (default), \"linear_surv\" \"const_haz\". See details.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Survival Distribution Container — survDistr","text":"Displays summary information survDistr object, including number observations time points.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Distribution Container — survDistr","text":"","code":"survDistr$print()"},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"method-data-","dir":"Reference","previous_headings":"","what":"Method data()","title":"Survival Distribution Container — survDistr","text":"Return stored data matrix.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Distribution Container — survDistr","text":"","code":"survDistr$data(add_times = TRUE)"},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Distribution Container — survDistr","text":"add_times (logical(1)) TRUE (default), column names set relevant time points.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Survival Distribution Container — survDistr","text":"(matrix)","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"method-survival-","dir":"Reference","previous_headings":"","what":"Method survival()","title":"Survival Distribution Container — survDistr","text":"Computes survival probabilities \\(S(t)\\) specified time points. Uses mat_interp().","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Distribution Container — survDistr","text":"","code":"survDistr$survival(times = NULL, add_times = TRUE)"},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Distribution Container — survDistr","text":"times (numeric) New time points interpolate. Values need sorted unique, just non-negative. NULL, object's stored time points used. add_times (logical(1)) TRUE (default), column names set relevant time points.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Survival Distribution Container — survDistr","text":"matrix survival probabilities","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"method-cdf-","dir":"Reference","previous_headings":"","what":"Method cdf()","title":"Survival Distribution Container — survDistr","text":"Computes cumulative distribution function \\(F(t) = 1 - S(t)\\) specified time points. \\(F(t)\\) probability event occurred time \\(t\\). Uses mat_interp().","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Distribution Container — survDistr","text":"","code":"survDistr$cdf(times = NULL, add_times = TRUE)"},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Distribution Container — survDistr","text":"times (numeric) New time points interpolate. Values need sorted unique, just non-negative. NULL, object's stored time points used. add_times (logical(1)) TRUE (default), column names set relevant time points.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Survival Distribution Container — survDistr","text":"cdf matrix.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"method-cumhazard-","dir":"Reference","previous_headings":"","what":"Method cumhazard()","title":"Survival Distribution Container — survDistr","text":"Computes cumulative hazard specified time points : \\(H(t) = -log(S(t))\\).","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Distribution Container — survDistr","text":"","code":"survDistr$cumhazard(times = NULL, add_times = TRUE, eps = 1e-06)"},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Distribution Container — survDistr","text":"times (numeric) New time points interpolate. Values need sorted unique, just non-negative. NULL, object's stored time points used. add_times (logical(1)) TRUE (default), column names set relevant time points. eps (numeric(1)) small number substitute zero values order prevent errors e.g. log(0) /division--zero calculations. Default value 1e-06.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Survival Distribution Container — survDistr","text":"matrix cumulative hazards.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"method-hazard-","dir":"Reference","previous_headings":"","what":"Method hazard()","title":"Survival Distribution Container — survDistr","text":"Computes hazard specified time points : \\(h(t) = H(t) - H(t-1)\\).","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Distribution Container — survDistr","text":"","code":"survDistr$hazard(times = NULL, eps = 1e-06)"},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Distribution Container — survDistr","text":"times (numeric) New time points interpolate. Values need sorted unique, just non-negative. NULL, object's stored time points used. eps (numeric(1)) small number substitute zero values order prevent errors e.g. log(0) /division--zero calculations. Default value 1e-06.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Survival Distribution Container — survDistr","text":"hazard matrix.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"method-pdf-","dir":"Reference","previous_headings":"","what":"Method pdf()","title":"Survival Distribution Container — survDistr","text":"Computes probability density function \\(f(t)\\) specified time points. \\(f(t)\\) probability event occurring specific time \\(t\\). constant survival interpolation, \\(f(t) = F(t) - F(t-1)\\), \\(F(t)\\) cumulative distribution.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Distribution Container — survDistr","text":"","code":"survDistr$pdf(times = NULL)"},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Distribution Container — survDistr","text":"times (numeric) New time points interpolate. Values need sorted unique, just non-negative. NULL, object's stored time points used.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Survival Distribution Container — survDistr","text":"pdf matrix.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Survival Distribution Container — survDistr","text":"objects class cloneable method.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Distribution Container — survDistr","text":"","code":"survDistr$clone(deep = FALSE)"},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Distribution Container — survDistr","text":"deep Whether make deep clone.","code":""},{"path":"https://survdistr.mlr-org.com/reference/survDistr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survival Distribution Container — survDistr","text":"","code":"# generate survival matrix mat = matrix(data = c(1,0.6,0.4,0.8,0.8,0.7), nrow = 2,              ncol = 3, byrow = TRUE) times = c(12, 34, 42) x = survDistr$new(mat, times) x #> A [2 x 3] survival matrix #> Number of observations: 2 #> Number of time points: 3 #> Interpolation method: Piece-wise Constant Survival   # stored survival matrix x$data() #>       12  34  42 #> [1,] 1.0 0.6 0.4 #> [2,] 0.8 0.8 0.7  # interpolation method x$interp_meth #> [1] \"const_surv\"  # time points x$times #> [1] 12 34 42  # S(t) at given time points (constant interpolation) x$survival(times = c(10, 30, 42, 50)) #>      10  30  42  50 #> [1,]  1 1.0 0.4 0.4 #> [2,]  1 0.8 0.7 0.7 # same but with linear interpolation x$interp_meth = \"linear_surv\" x$survival(times = c(10, 30, 42, 50)) #>             10        30  42  50 #> [1,] 1.0000000 0.6727273 0.4 0.2 #> [2,] 0.8333333 0.8000000 0.7 0.6 # time points can be unordered and duplicated x$survival(times = c(10, 30, 10, 50)) #>             10        30        10  50 #> [1,] 1.0000000 0.6727273 1.0000000 0.2 #> [2,] 0.8333333 0.8000000 0.8333333 0.6  # Cumulative hazard x$cumhazard() #>             12        34        42 #> [1,] 0.0000000 0.5108256 0.9162907 #> [2,] 0.2231436 0.2231436 0.3566749"},{"path":"https://survdistr.mlr-org.com/reference/vec_interp.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate a Survival / CDF / CIF Vector — vec_interp","title":"Interpolate a Survival / CDF / CIF Vector — vec_interp","text":"Wrapper around internal C++ interpolation function c_vec_interp. Performs input validation calling underlying C++ code. Can used survival, cumulative distribution (CDF), cumulative incidence (CIF) curves (vectors).","code":""},{"path":"https://survdistr.mlr-org.com/reference/vec_interp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate a Survival / CDF / CIF Vector — vec_interp","text":"","code":"vec_interp(   x,   times = NULL,   eval_times = NULL,   constant = TRUE,   type = \"surv\",   add_times = TRUE,   check = TRUE )"},{"path":"https://survdistr.mlr-org.com/reference/vec_interp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate a Survival / CDF / CIF Vector — vec_interp","text":"x (numeric()) Survival/CDF/CIF vector given time points. Optionally named corresponding times. times (numeric() | NULL) Original time points corresponding x. NULL, extracted names(x). eval_times (numeric() | NULL) New time points interpolate. Values need sorted unique, just non-negative. NULL, x returned unchanged. constant (logical(1)) TRUE (default), use piecewise-constant (left-continuous) interpolation. FALSE, use piecewise-linear interpolation. type (character(1)) One \"surv\" (default), \"cdf\", \"cif\", indicating input data type. add_times (logical(1)) TRUE (default), column names set relevant time points. check (logical(1)) TRUE (default), perform simple validation (range, monotonicity, bounds). Set FALSE skip checks (recommended external use).","code":""},{"path":"https://survdistr.mlr-org.com/reference/vec_interp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate a Survival / CDF / CIF Vector — vec_interp","text":"numeric vector length length(eval_times) interpolated values.","code":""},{"path":"https://survdistr.mlr-org.com/reference/vec_interp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate a Survival / CDF / CIF Vector — vec_interp","text":"","code":"surv_vec = c(1, 0.8, 0.6) names(surv_vec) = c(0, 10, 20) eval_times = c(5, 15, 25) vec_interp(surv_vec, eval_times = eval_times, type = \"surv\") #>   5  15  25  #> 1.0 0.8 0.6"},{"path":"https://survdistr.mlr-org.com/news/index.html","id":"survdistr-001","dir":"Changelog","previous_headings":"","what":"survdistr 0.0.1","title":"survdistr 0.0.1","text":"Base survDistr class. assert_prob_matrix() asserting survival, CDF CIF matrices. mat_interp() vec_interp() constant linear interpolation survival, CDF CIF matrices/vectors (using internal Rcpp methods).","code":""}]
