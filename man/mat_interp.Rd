% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interp_funs.R
\name{mat_interp}
\alias{mat_interp}
\title{Interpolate Survival / CDF / CIF Matrices}
\usage{
mat_interp(
  x,
  times = NULL,
  eval_times = NULL,
  constant = TRUE,
  type = "surv",
  add_times = TRUE,
  check = TRUE
)
}
\arguments{
\item{x}{(\code{matrix()})\cr Survival/CDF/CIF matrix with rows as observations
and columns as time points.}

\item{times}{(\code{numeric()}|\code{NULL})\cr
Original time points corresponding to columns of \code{x}.}

\item{eval_times}{(\code{numeric()}|\code{NULL})\cr
New time points at which to interpolate.
Values do not need to be sorted or unique, just non-negative.
If \code{NULL}, \code{x} is returned unchanged.}

\item{constant}{(\code{logical(1)})\cr
If \code{TRUE}, use piecewise-constant (left-continuous) interpolation.
If \code{FALSE}, use piecewise-linear interpolation.}

\item{type}{(\code{character(1)})\cr
One of \code{"surv"}, \code{"cdf"}, or \code{"cif"}, indicating the data type of the input matrix.}

\item{add_times}{(\code{logical(1)})\cr
If \code{TRUE}, column names are set to the relevant time points.}

\item{check}{(\code{logical(1)})\cr
If \code{TRUE}, run input matrix validation via \code{\link[=assert_surv_matrix]{assert_surv_matrix()}};
set \code{FALSE} to skip checks (NOT recommended for external use).}
}
\value{
A numeric matrix with the same number of rows as \code{x} and number of
columns equal to \code{length(eval_times)}.
}
\description{
Wrapper around the internal C++ interpolation function \code{c_mat_interp}.
Performs input validation before calling the underlying C++ code.
Can be used for survival, cumulative distribution (CDF), or cumulative
incidence (CIF) matrices.
}
\examples{
x = matrix(c(1, 0.8, 0.6,
             1, 0.7, 0.4),
           nrow = 2, byrow = TRUE)
times = c(0, 10, 20)
eval_times = c(5, 15, 25, 15)  # duplicates & unordered
mat_interp(x, times, eval_times, constant = TRUE, type = "surv")
}
