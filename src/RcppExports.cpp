// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_assert_surv_matrix
bool rcpp_assert_surv_matrix(const NumericMatrix& mat);
RcppExport SEXP _survdistr_rcpp_assert_surv_matrix(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_assert_surv_matrix(mat));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mat_interp
NumericMatrix rcpp_mat_interp(const NumericMatrix& x, const NumericVector& times, const NumericVector& new_times, bool surv, bool constant);
RcppExport SEXP _survdistr_rcpp_mat_interp(SEXP xSEXP, SEXP timesSEXP, SEXP new_timesSEXP, SEXP survSEXP, SEXP constantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_times(new_timesSEXP);
    Rcpp::traits::input_parameter< bool >::type surv(survSEXP);
    Rcpp::traits::input_parameter< bool >::type constant(constantSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mat_interp(x, times, new_times, surv, constant));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_wcumsum_mat
NumericMatrix rcpp_wcumsum_mat(const NumericMatrix& x, const NumericVector& times);
RcppExport SEXP _survdistr_rcpp_wcumsum_mat(SEXP xSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_wcumsum_mat(x, times));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_wcumsum_mat_interp
NumericMatrix rcpp_wcumsum_mat_interp(const NumericMatrix& x, const NumericVector& times, const NumericVector& new_times);
RcppExport SEXP _survdistr_rcpp_wcumsum_mat_interp(SEXP xSEXP, SEXP timesSEXP, SEXP new_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_times(new_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_wcumsum_mat_interp(x, times, new_times));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_survdistr_rcpp_assert_surv_matrix", (DL_FUNC) &_survdistr_rcpp_assert_surv_matrix, 1},
    {"_survdistr_rcpp_mat_interp", (DL_FUNC) &_survdistr_rcpp_mat_interp, 5},
    {"_survdistr_rcpp_wcumsum_mat", (DL_FUNC) &_survdistr_rcpp_wcumsum_mat, 2},
    {"_survdistr_rcpp_wcumsum_mat_interp", (DL_FUNC) &_survdistr_rcpp_wcumsum_mat_interp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_survdistr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
