% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assertions.R
\name{assert_prob_matrix}
\alias{assert_prob_matrix}
\title{Assert probability matrix}
\usage{
assert_prob_matrix(x, times = NULL, type = "surv")
}
\arguments{
\item{x}{(\code{matrix()})\cr
A probability matrix.
Rows correspond to observations and columns correspond to time points.}

\item{times}{(\code{numeric()}|\code{NULL})\cr
Optional numeric vector of time points corresponding to the columns of \code{x}.
If \code{numeric()}, these will be returned after the checks are performed.
If \code{NULL} (default), the time points are extracted from \code{colnames(x)}.}

\item{type}{(\code{character(1)})\cr
Type of probability function: \code{"surv"} (default), \code{"cdf"}, or \code{"cif"}.}
}
\value{
Invisibly returns the validated numeric vector of time points.
Throws an error if validation fails.
}
\description{
Validates that the input is a proper probability matrix representing either
a survival function (\code{"surv"}), cumulative distribution function (\code{"cdf"}),
or cumulative incidence function (\code{"cif"}).
Uses the internal Rcpp function \code{c_assert_prob_matrix()}.
}
\details{
The following conditions must hold:
\enumerate{
\item The input \code{x} is a numeric matrix with no missing values.
\item Time points (\code{times}) are numeric, non-negative, unique, and sorted.
If not supplied, they are derived from \code{colnames(x)} (coerced to \code{numeric}).
\item The number of time points equals the number of columns of \code{x}.
\item All values are valid probabilities, i.e. lie in \eqn{[0,1]}.
\item Each row is monotone:
\itemize{
\item \code{"surv"}: non-increasing survival curves, i.e. \eqn{S(t_i) \ge S(t_{i+1})}.
\item \code{"cdf"} / \code{"cif"}: non-decreasing functions, i.e. \eqn{F(t_i) \le F(t_{i+1})}.
}
\item Boundary condition at \code{t = 0}:
\itemize{
\item \code{"surv"}: \eqn{S(0) = 1}.
\item \code{"cdf"} / \code{"cif"}: \eqn{F(0) = 0}.
}
}
}
\examples{
x = matrix(data = c(1, 0.6, 0.4,
                    0.8, 0.8, 0.7),
           nrow = 2, ncol = 3, byrow = TRUE)

# Explicitly provide time points
assert_prob_matrix(x, times = c(12, 34, 42), type = "surv")

# Or use column names as time points
colnames(x) = c(12, 34, 42)
assert_prob_matrix(x)

# check CDF
assert_prob_matrix(1 - x, type = "cdf")

}
